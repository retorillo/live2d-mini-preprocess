#include 'lib.jsx'

var defaultColorName = 'color';
var polygonRadius = 50;
var polygonStroke = { red: 10, green: 10, blue: 10 }
var doc = app.activeDocument;
var al = doc.activeLayer;
var qid;
var nls;
bootstrap();

function addStrokeFX(rgb) {
  var idsetd = charIDToTypeID( "setd" );
  var desc1 = new ActionDescriptor();
  var idnull = charIDToTypeID( "null" );
  var ref = new ActionReference();
  var idPrpr = charIDToTypeID( "Prpr" );
  var idLefx = charIDToTypeID( "Lefx" );
  ref.putProperty( idPrpr, idLefx );
  var idLyr = charIDToTypeID( "Lyr " );
  var idOrdn = charIDToTypeID( "Ordn" );
  var idTrgt = charIDToTypeID( "Trgt" );
  ref.putEnumerated( idLyr, idOrdn, idTrgt );
  desc1.putReference( idnull, ref);
  var idT = charIDToTypeID( "T   " );
  var desc2 = new ActionDescriptor();
  var idScl = charIDToTypeID( "Scl " );
  var idPrc = charIDToTypeID( "#Prc" );
  desc2.putUnitDouble( idScl, idPrc, 0); // 833.333333 ); ?
  var idFrFX = charIDToTypeID( "FrFX" );
  var desc3 = new ActionDescriptor();
  var idenab = charIDToTypeID( "enab" );
  desc3.putBoolean( idenab, true );
  var idpresent = stringIDToTypeID( "present" );
  desc3.putBoolean( idpresent, true );
  var idshowInDialog = stringIDToTypeID( "showInDialog" );
  desc3.putBoolean( idshowInDialog, true );
  var idStyl = charIDToTypeID( "Styl" );
  var idFStl = charIDToTypeID( "FStl" );
  var idOutF = charIDToTypeID( "OutF" );
  desc3.putEnumerated( idStyl, idFStl, idOutF );
  var idPntT = charIDToTypeID( "PntT" );
  var idFrFl = charIDToTypeID( "FrFl" );
  var idSClr = charIDToTypeID( "SClr" );
  desc3.putEnumerated( idPntT, idFrFl, idSClr );
  var idMd = charIDToTypeID( "Md  " );
  var idBlnM = charIDToTypeID( "BlnM" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc3.putEnumerated( idMd, idBlnM, idNrml );
  var idOpct = charIDToTypeID( "Opct" );
  var idPrc = charIDToTypeID( "#Prc" );
  desc3.putUnitDouble( idOpct, idPrc, 100.000000 );
  var idSz = charIDToTypeID( "Sz  " );
  var idPxl = charIDToTypeID( "#Pxl" );
  desc3.putUnitDouble( idSz, idPxl, 1.000000 );
  var idClr = charIDToTypeID( "Clr " );
  var desc4 = new ActionDescriptor();
  var idRd = charIDToTypeID( "Rd  " );
  desc4.putDouble( idRd, rgb.red );
  var idGrn = charIDToTypeID( "Grn " );
  desc4.putDouble( idGrn, rgb.green );
  var idBl = charIDToTypeID( "Bl  " );
  desc4.putDouble( idBl, rgb.blue );
  var idRGBC = charIDToTypeID( "RGBC" );
  desc3.putObject( idClr, idRGBC, desc4 );
  var idoverprint = stringIDToTypeID( "overprint" );
  desc3.putBoolean( idoverprint, false );
  var idFrFX = charIDToTypeID( "FrFX" );
  desc2.putObject( idFrFX, idFrFX, desc3 );
  var idLefx = charIDToTypeID( "Lefx" );
  desc1.putObject( idT, idLefx, desc2 );
  executeAction( idsetd, desc1, DialogModes.NO );
}
function rasterlizeLayer() {
  var idrasterizeLayer = stringIDToTypeID( "rasterizeLayer" );
  var desc = new ActionDescriptor();
  var idnull = charIDToTypeID( "null" );
  var ref = new ActionReference();
  var idLyr = charIDToTypeID( "Lyr " );
  var idOrdn = charIDToTypeID( "Ordn" );
  var idTrgt = charIDToTypeID( "Trgt" );
  ref.putEnumerated( idLyr, idOrdn, idTrgt );
  desc.putReference( idnull, ref );
  executeAction( idrasterizeLayer, desc, DialogModes.NO );
}
function makePolygon(rgb, pt, radius) {
  var idMk = charIDToTypeID( "Mk  " );
  var desc0 = new ActionDescriptor();
  var idnull = charIDToTypeID( "null" );
  var ref = new ActionReference();
  var idcontentLayer = stringIDToTypeID( "contentLayer" );
  ref.putClass( idcontentLayer );
  desc0.putReference( idnull, ref );
  var idUsng = charIDToTypeID( "Usng" );
  var desc1 = new ActionDescriptor();
  var idType = charIDToTypeID( "Type" );
  var desc2 = new ActionDescriptor();
  var idClr = charIDToTypeID( "Clr " );
  var desc3 = new ActionDescriptor();
  var idRd = charIDToTypeID( "Rd  " );
  desc3.putDouble( idRd, rgb.red );
  var idGrn = charIDToTypeID( "Grn " );
  desc3.putDouble( idGrn, rgb.green );
  var idBl = charIDToTypeID( "Bl  " );
  desc3.putDouble( idBl, rgb.blue );
  var idRGBC = charIDToTypeID( "RGBC" );
  desc2.putObject( idClr, idRGBC, desc3 );
  var idsolidColorLayer = stringIDToTypeID( "solidColorLayer" );
  desc1.putObject( idType, idsolidColorLayer, desc2 );
  var idShp = charIDToTypeID( "Shp " );
  var desc4 = new ActionDescriptor();
  var idCntr = charIDToTypeID( "Cntr" );
  var desc5 = new ActionDescriptor();
  var idHrzn = charIDToTypeID( "Hrzn" );
  var idPxl = charIDToTypeID( "#Pxl" );
  desc5.putUnitDouble( idHrzn, idPxl, pt.x );
  var idVrtc = charIDToTypeID( "Vrtc" );
  var idPxl = charIDToTypeID( "#Pxl" );
  desc5.putUnitDouble( idVrtc, idPxl, pt.y );
  var idPnt = charIDToTypeID( "Pnt " );
  desc4.putObject( idCntr, idPnt, desc5 );
  var idcorner = stringIDToTypeID( "corner" );
  var desc6 = new ActionDescriptor();
  var idHrzn = charIDToTypeID( "Hrzn" );
  var idPxl = charIDToTypeID( "#Pxl" );
  desc6.putUnitDouble( idHrzn, idPxl, 0 /* angle (in degree) ? */ );
  var idVrtc = charIDToTypeID( "Vrtc" );
  var idPxl = charIDToTypeID( "#Pxl" );
  desc6.putUnitDouble( idVrtc, idPxl, radius );
  var idOfst = charIDToTypeID( "Ofst" );
  desc4.putObject( idcorner, idOfst, desc6 );
  var idsides = stringIDToTypeID( "sides" );
  desc4.putInteger( idsides, 6 );
  var idPlgn = charIDToTypeID( "Plgn" );
  desc1.putObject( idShp, idPlgn, desc4 );
  var idstrokeStyle = stringIDToTypeID( "strokeStyle" );
  var desc7 = new ActionDescriptor();
  var idstrokeStyleVersion = stringIDToTypeID( "strokeStyleVersion" );
  desc7.putInteger( idstrokeStyleVersion, 2 );
  var idstrokeEnabled = stringIDToTypeID( "strokeEnabled" );
  desc7.putBoolean( idstrokeEnabled, true );
  var idfillEnabled = stringIDToTypeID( "fillEnabled" );
  desc7.putBoolean( idfillEnabled, true );
  var idstrokeStyleLineWidth = stringIDToTypeID( "strokeStyleLineWidth" );
  var idPxl = charIDToTypeID( "#Pxl" );
  desc7.putUnitDouble( idstrokeStyleLineWidth, idPxl, 1.000000 );
  var idstrokeStyleLineDashOffset = stringIDToTypeID( "strokeStyleLineDashOffset" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc7.putUnitDouble( idstrokeStyleLineDashOffset, idPnt, 0.000000 );
  var idstrokeStyleMiterLimit = stringIDToTypeID( "strokeStyleMiterLimit" );
  desc7.putDouble( idstrokeStyleMiterLimit, 100.000000 );
  var idstrokeStyleLineCapType = stringIDToTypeID( "strokeStyleLineCapType" );
  var idstrokeStyleLineCapType = stringIDToTypeID( "strokeStyleLineCapType" );
  var idstrokeStyleButtCap = stringIDToTypeID( "strokeStyleButtCap" );
  desc7.putEnumerated( idstrokeStyleLineCapType, idstrokeStyleLineCapType, idstrokeStyleButtCap );
  var idstrokeStyleLineJoinType = stringIDToTypeID( "strokeStyleLineJoinType" );
  var idstrokeStyleLineJoinType = stringIDToTypeID( "strokeStyleLineJoinType" );
  var idstrokeStyleMiterJoin = stringIDToTypeID( "strokeStyleMiterJoin" );
  desc7.putEnumerated( idstrokeStyleLineJoinType, idstrokeStyleLineJoinType, idstrokeStyleMiterJoin );
  var idstrokeStyleLineAlignment = stringIDToTypeID( "strokeStyleLineAlignment" );
  var idstrokeStyleLineAlignment = stringIDToTypeID( "strokeStyleLineAlignment" );
  var idstrokeStyleAlignInside = stringIDToTypeID( "strokeStyleAlignInside" );
  desc7.putEnumerated( idstrokeStyleLineAlignment, idstrokeStyleLineAlignment, idstrokeStyleAlignInside );
  var idstrokeStyleScaleLock = stringIDToTypeID( "strokeStyleScaleLock" );
  desc7.putBoolean( idstrokeStyleScaleLock, false );
  var idstrokeStyleStrokeAdjust = stringIDToTypeID( "strokeStyleStrokeAdjust" );
  desc7.putBoolean( idstrokeStyleStrokeAdjust, false );
  var idstrokeStyleLineDashSet = stringIDToTypeID( "strokeStyleLineDashSet" );
  var list17 = new ActionList();
  desc7.putList( idstrokeStyleLineDashSet, list17 );
  var idstrokeStyleBlendMode = stringIDToTypeID( "strokeStyleBlendMode" );
  var idBlnM = charIDToTypeID( "BlnM" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc7.putEnumerated( idstrokeStyleBlendMode, idBlnM, idNrml );
  var idstrokeStyleOpacity = stringIDToTypeID( "strokeStyleOpacity" );
  var idPrc = charIDToTypeID( "#Prc" );
  desc7.putUnitDouble( idstrokeStyleOpacity, idPrc, 100 );
  var idstrokeStyleContent = stringIDToTypeID( "strokeStyleContent" );
  var desc8 = new ActionDescriptor();
  var idClr = charIDToTypeID( "Clr " );
  var desc9 = new ActionDescriptor();
  var idRd = charIDToTypeID( "Rd  " );
  desc9.putDouble( idRd, rgb.red);
  var idGrn = charIDToTypeID( "Grn " );
  desc9.putDouble( idGrn, rgb.green );
  var idBl = charIDToTypeID( "Bl  " );
  desc9.putDouble( idBl, rgb.blue );
  var idRGBC = charIDToTypeID( "RGBC" );
  desc8.putObject( idClr, idRGBC, desc9 );
  var idsolidColorLayer = stringIDToTypeID( "solidColorLayer" );
  desc7.putObject( idstrokeStyleContent, idsolidColorLayer, desc8 );
  var idstrokeStyleResolution = stringIDToTypeID( "strokeStyleResolution" );
  desc7.putDouble( idstrokeStyleResolution, 600.000000 );
  var idstrokeStyle = stringIDToTypeID( "strokeStyle" );
  desc1.putObject( idstrokeStyle, idstrokeStyle, desc7 );
  var idcontentLayer = stringIDToTypeID( "contentLayer" );
  desc0.putObject( idUsng, idcontentLayer, desc1 );
  var idLyrI = charIDToTypeID( "LyrI" );
  desc0.putInteger( idLyrI, 7614 );
  executeAction( idMk, desc0, DialogModes.NO );
}
function queryFillID(l){
  var m = /#(.+)$/.exec(l.name);
  if (!m) return;
  m = /fill\(([^)]+)\)/.exec(m[1]);
  if (!m) return; 
  return m[1];
}
function findPaletteLayerSet(criteria) {
  if (!criteria.parent) return;
  var ls = criteria.parent.layerSets;
  if (!ls) return;
  for (var c = 0; c < ls.length; c++) {
    if (/^#\s*palette$/.test(ls[c].name))
      return ls[c];
  }
  return findPaletteLayerSet(criteria.parent); 
}
function findNearestLayerSet(palette, id) {
  idhead = id.split(/-/g)[0];
  var ls = palette.layerSets;
  for (var c = 0; c < ls.length; c++) {
    if (ls[c].name == idhead) return ls[c];
  }
  var al = doc.activeLayer;
  var nls = ls.add();
  nls.name = idhead;
  doc.activeLayer = nls;
  addStrokeFX(polygonStroke);
  doc.activeLayer = al; 
  return nls;
}
function findPalette(nls, id) {
  var als = nls.artLayers;
  for (var c = 0; c < als.length; c++) {
    if (queryFillID(als[c]) == id)
      return als[c];
  }
  return null;
}
function suggestFillID(nls) {
  var head = nls.name;
  var ls = nls.artLayers;
  var maxnr = 0;
  for (var c = 0; c < ls.length; c++) {
    var m = /#fill\(([^)]+)([0-9]+)\)/.exec(ls[c].name);
    if (!m) continue;
    if (m[1] !== head) continue;
    maxnr = Math.max(maxnr, parseInt(m[2]));
  }
  return head + (maxnr + 1);
}
function findLastPolygon(nls) {
  var als = nls.artLayers;
  var max = { layer: als[0], value: 0 };
  for (var c = 0; c < als.length; c++) {
    // TODO: calculate distance by using vector (from document left-top point)
    var m = Math.max(max.value, als[c].bounds[3]);
    if (max.value < m)
      max.layer = als[c];
    max.value = m;
  }
  return max.layer;
}
function makePolygonInNLS(nls) {
  var pt;
  if (!nls.artLayers || !nls.artLayers.length) {
    var dw = doc.width;
    var dh = doc.height;
    addText(nls.name);
    var text = doc.activeLayer;
    text.x = 0;
    text.y = 0;
    var tw = text.bounds[2] - text.bounds[0];
    var th = text.bounds[3] - text.bounds[1];
    text.translate(dw / 2 - tw / 2, dh / 2 - polygonRadius * 1.5);
    pt = { x: dw / 2, y: dh / 2 };
  }
  else {
    var last = findLastPolygon(nls);
    var w = last.bounds[2] - last.bounds[0];
    var h = last.bounds[3] - last.bounds[1];
    pt = { x : w / 2 + last.bounds[0],
           y : h / 2 + last.bounds[1] };
    pt.x += w / 2;
    pt.y += w;
  }
  doc.activeLayer = nls;
  makePolygon(app.foregroundColor.rgb, pt, polygonRadius);
  rasterlizeLayer(doc.activeLayer);
  return doc.activeLayer;
}
function addText(string) {
  var idMk = charIDToTypeID( "Mk  " );
  var desc1077 = new ActionDescriptor();
  var idnull = charIDToTypeID( "null" );
  var ref218 = new ActionReference();
  var idTxLr = charIDToTypeID( "TxLr" );
  ref218.putClass( idTxLr );
  desc1077.putReference( idnull, ref218 );
  var idUsng = charIDToTypeID( "Usng" );
  var desc1078 = new ActionDescriptor();
  var idTxt = charIDToTypeID( "Txt " );
  desc1078.putString( idTxt, string);
  var idwarp = stringIDToTypeID( "warp" );
  var desc1079 = new ActionDescriptor();
  var idwarpStyle = stringIDToTypeID( "warpStyle" );
  var idwarpStyle = stringIDToTypeID( "warpStyle" );
  var idwarpNone = stringIDToTypeID( "warpNone" );
  desc1079.putEnumerated( idwarpStyle, idwarpStyle, idwarpNone );
  var idwarpValue = stringIDToTypeID( "warpValue" );
  desc1079.putDouble( idwarpValue, 0.000000 );
  var idwarpPerspective = stringIDToTypeID( "warpPerspective" );
  desc1079.putDouble( idwarpPerspective, 0.000000 );
  var idwarpPerspectiveOther = stringIDToTypeID( "warpPerspectiveOther" );
  desc1079.putDouble( idwarpPerspectiveOther, 0.000000 );
  var idwarpRotate = stringIDToTypeID( "warpRotate" );
  var idOrnt = charIDToTypeID( "Ornt" );
  var idHrzn = charIDToTypeID( "Hrzn" );
  desc1079.putEnumerated( idwarpRotate, idOrnt, idHrzn );
  var idwarp = stringIDToTypeID( "warp" );
  desc1078.putObject( idwarp, idwarp, desc1079 );
  var idTxtC = charIDToTypeID( "TxtC" );
  var desc1080 = new ActionDescriptor();
  var idHrzn = charIDToTypeID( "Hrzn" );
  var idPrc = charIDToTypeID( "#Prc" );
  desc1080.putUnitDouble( idHrzn, idPrc, 0 );
  var idVrtc = charIDToTypeID( "Vrtc" );
  var idPrc = charIDToTypeID( "#Prc" );
  desc1080.putUnitDouble( idVrtc, idPrc, 0 );
  var idPnt = charIDToTypeID( "Pnt " );
  desc1078.putObject( idTxtC, idPnt, desc1080 );
  var idtextGridding = stringIDToTypeID( "textGridding" );
  var idtextGridding = stringIDToTypeID( "textGridding" );
  var idNone = charIDToTypeID( "None" );
  desc1078.putEnumerated( idtextGridding, idtextGridding, idNone );
  var idOrnt = charIDToTypeID( "Ornt" );
  var idOrnt = charIDToTypeID( "Ornt" );
  var idHrzn = charIDToTypeID( "Hrzn" );
  desc1078.putEnumerated( idOrnt, idOrnt, idHrzn );
  var idAntA = charIDToTypeID( "AntA" );
  var idAnnt = charIDToTypeID( "Annt" );
  var idantiAliasSharp = stringIDToTypeID( "antiAliasSharp" );
  desc1078.putEnumerated( idAntA, idAnnt, idantiAliasSharp );
  var idbounds = stringIDToTypeID( "bounds" );
  var desc1081 = new ActionDescriptor();
  var idLeft = charIDToTypeID( "Left" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1081.putUnitDouble( idLeft, idPnt, -9.023789 );
  var idTop = charIDToTypeID( "Top " );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1081.putUnitDouble( idTop, idPnt, -7.040037 );
  var idRght = charIDToTypeID( "Rght" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1081.putUnitDouble( idRght, idPnt, 9.023813 );
  var idBtom = charIDToTypeID( "Btom" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1081.putUnitDouble( idBtom, idPnt, 2.712036 );
  var idbounds = stringIDToTypeID( "bounds" );
  desc1078.putObject( idbounds, idbounds, desc1081 );
  var idboundingBox = stringIDToTypeID( "boundingBox" );
  var desc1082 = new ActionDescriptor();
  var idLeft = charIDToTypeID( "Left" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1082.putUnitDouble( idLeft, idPnt, -8.656289 );
  var idTop = charIDToTypeID( "Top " );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1082.putUnitDouble( idTop, idPnt, -6.352502 );
  var idRght = charIDToTypeID( "Rght" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1082.putUnitDouble( idRght, idPnt, 8.896351 );
  var idBtom = charIDToTypeID( "Btom" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1082.putUnitDouble( idBtom, idPnt, 0.100505 );
  var idboundingBox = stringIDToTypeID( "boundingBox" );
  desc1078.putObject( idboundingBox, idboundingBox, desc1082 );
  var idtextShape = stringIDToTypeID( "textShape" );
  var list96 = new ActionList();
  var desc1083 = new ActionDescriptor();
  var idTEXT = charIDToTypeID( "TEXT" );
  var idTEXT = charIDToTypeID( "TEXT" );
  var idPnt = charIDToTypeID( "Pnt " );
  desc1083.putEnumerated( idTEXT, idTEXT, idPnt );
  var idOrnt = charIDToTypeID( "Ornt" );
  var idOrnt = charIDToTypeID( "Ornt" );
  var idHrzn = charIDToTypeID( "Hrzn" );
  desc1083.putEnumerated( idOrnt, idOrnt, idHrzn );
  var idTrnf = charIDToTypeID( "Trnf" );
  var desc1084 = new ActionDescriptor();
  var idxx = stringIDToTypeID( "xx" );
  desc1084.putDouble( idxx, 1.000000 );
  var idxy = stringIDToTypeID( "xy" );
  desc1084.putDouble( idxy, 0.000000 );
  var idyx = stringIDToTypeID( "yx" );
  desc1084.putDouble( idyx, 0.000000 );
  var idyy = stringIDToTypeID( "yy" );
  desc1084.putDouble( idyy, 1.000000 );
  var idtx = stringIDToTypeID( "tx" );
  desc1084.putDouble( idtx, 0.000000 );
  var idty = stringIDToTypeID( "ty" );
  desc1084.putDouble( idty, 0.000000 );
  var idTrnf = charIDToTypeID( "Trnf" );
  desc1083.putObject( idTrnf, idTrnf, desc1084 );
  var idrowCount = stringIDToTypeID( "rowCount" );
  desc1083.putInteger( idrowCount, 1 );
  var idcolumnCount = stringIDToTypeID( "columnCount" );
  desc1083.putInteger( idcolumnCount, 1 );
  var idrowMajorOrder = stringIDToTypeID( "rowMajorOrder" );
  desc1083.putBoolean( idrowMajorOrder, true );
  var idrowGutter = stringIDToTypeID( "rowGutter" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1083.putUnitDouble( idrowGutter, idPnt, 0.000000 );
  var idcolumnGutter = stringIDToTypeID( "columnGutter" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1083.putUnitDouble( idcolumnGutter, idPnt, 0.000000 );
  var idSpcn = charIDToTypeID( "Spcn" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1083.putUnitDouble( idSpcn, idPnt, 0.000000 );
  var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
  var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
  var idalignByAscent = stringIDToTypeID( "alignByAscent" );
  desc1083.putEnumerated( idframeBaselineAlignment, idframeBaselineAlignment, idalignByAscent );
  var idfirstBaselineMinimum = stringIDToTypeID( "firstBaselineMinimum" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1083.putUnitDouble( idfirstBaselineMinimum, idPnt, 0.000000 );
  var idbase = stringIDToTypeID( "base" );
  var desc1085 = new ActionDescriptor();
  var idHrzn = charIDToTypeID( "Hrzn" );
  desc1085.putDouble( idHrzn, 0.000000 );
  var idVrtc = charIDToTypeID( "Vrtc" );
  desc1085.putDouble( idVrtc, 0.000000 );
  var idPnt = charIDToTypeID( "Pnt " );
  desc1083.putObject( idbase, idPnt, desc1085 );
  var idtextShape = stringIDToTypeID( "textShape" );
  list96.putObject( idtextShape, desc1083 );
  desc1078.putList( idtextShape, list96 );
  var idTxtt = charIDToTypeID( "Txtt" );
  var list97 = new ActionList();
  var desc1086 = new ActionDescriptor();
  var idFrom = charIDToTypeID( "From" );
  desc1086.putInteger( idFrom, 0 );
  var idT = charIDToTypeID( "T   " );
  desc1086.putInteger( idT, 6 );
  var idTxtS = charIDToTypeID( "TxtS" );
  var desc1087 = new ActionDescriptor();
  var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
  desc1087.putBoolean( idstyleSheetHasParent, true );
  var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
  desc1087.putString( idfontPostScriptName, """Consolas""" );
  var idFntN = charIDToTypeID( "FntN" );
  desc1087.putString( idFntN, """Consolas""" );
  var idFntS = charIDToTypeID( "FntS" );
  desc1087.putString( idFntS, """R""" );
  var idScrp = charIDToTypeID( "Scrp" );
  desc1087.putInteger( idScrp, 1 );
  var idFntT = charIDToTypeID( "FntT" );
  desc1087.putInteger( idFntT, 2 );
  var idfontAvailable = stringIDToTypeID( "fontAvailable" );
  desc1087.putBoolean( idfontAvailable, true );
  var idSz = charIDToTypeID( "Sz  " );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1087.putUnitDouble( idSz, idPnt, 8 );
  var idimpliedFontSize = stringIDToTypeID( "impliedFontSize" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1087.putUnitDouble( idimpliedFontSize, idPnt, 8 );
  var idHrzS = charIDToTypeID( "HrzS" );
  desc1087.putDouble( idHrzS, 100.000000 );
  var idVrtS = charIDToTypeID( "VrtS" );
  desc1087.putDouble( idVrtS, 100.000000 );
  var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
  desc1087.putBoolean( idsyntheticBold, false );
  var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
  desc1087.putBoolean( idsyntheticItalic, false );
  var idautoLeading = stringIDToTypeID( "autoLeading" );
  desc1087.putBoolean( idautoLeading, true );
  var idTrck = charIDToTypeID( "Trck" );
  desc1087.putInteger( idTrck, 0 );
  var idBsln = charIDToTypeID( "Bsln" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1087.putUnitDouble( idBsln, idPnt, 0.000000 );
  var idimpliedBaselineShift = stringIDToTypeID( "impliedBaselineShift" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1087.putUnitDouble( idimpliedBaselineShift, idPnt, 0.000000 );
  var idAtKr = charIDToTypeID( "AtKr" );
  var idAtKr = charIDToTypeID( "AtKr" );
  var idmetricsKern = stringIDToTypeID( "metricsKern" );
  desc1087.putEnumerated( idAtKr, idAtKr, idmetricsKern );
  var idfontCaps = stringIDToTypeID( "fontCaps" );
  var idfontCaps = stringIDToTypeID( "fontCaps" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc1087.putEnumerated( idfontCaps, idfontCaps, idNrml );
  var iddigitSet = stringIDToTypeID( "digitSet" );
  var iddigitSet = stringIDToTypeID( "digitSet" );
  var idarabicDigits = stringIDToTypeID( "arabicDigits" );
  desc1087.putEnumerated( iddigitSet, iddigitSet, idarabicDigits );
  var idkashidas = stringIDToTypeID( "kashidas" );
  var idkashidas = stringIDToTypeID( "kashidas" );
  var idkashidaDefault = stringIDToTypeID( "kashidaDefault" );
  desc1087.putEnumerated( idkashidas, idkashidas, idkashidaDefault );
  var iddiacXOffset = stringIDToTypeID( "diacXOffset" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1087.putUnitDouble( iddiacXOffset, idPnt, 0.000000 );
  var iddiacYOffset = stringIDToTypeID( "diacYOffset" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1087.putUnitDouble( iddiacYOffset, idPnt, 0.000000 );
  var idmarkYDistFromBaseline = stringIDToTypeID( "markYDistFromBaseline" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1087.putUnitDouble( idmarkYDistFromBaseline, idPnt, 0.000000 );
  var idbaseline = stringIDToTypeID( "baseline" );
  var idbaseline = stringIDToTypeID( "baseline" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc1087.putEnumerated( idbaseline, idbaseline, idNrml );
  var idstrikethrough = stringIDToTypeID( "strikethrough" );
  var idstrikethrough = stringIDToTypeID( "strikethrough" );
  var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
  desc1087.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
  var idUndl = charIDToTypeID( "Undl" );
  var idUndl = charIDToTypeID( "Undl" );
  var idunderlineOff = stringIDToTypeID( "underlineOff" );
  desc1087.putEnumerated( idUndl, idUndl, idunderlineOff );
  var idligature = stringIDToTypeID( "ligature" );
  desc1087.putBoolean( idligature, true );
  var idaltligature = stringIDToTypeID( "altligature" );
  desc1087.putBoolean( idaltligature, false );
  var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
  desc1087.putBoolean( idcontextualLigatures, true );
  var idfractions = stringIDToTypeID( "fractions" );
  desc1087.putBoolean( idfractions, false );
  var idordinals = stringIDToTypeID( "ordinals" );
  desc1087.putBoolean( idordinals, false );
  var idswash = stringIDToTypeID( "swash" );
  desc1087.putBoolean( idswash, false );
  var idtitling = stringIDToTypeID( "titling" );
  desc1087.putBoolean( idtitling, false );
  var idconnectionForms = stringIDToTypeID( "connectionForms" );
  desc1087.putBoolean( idconnectionForms, true );
  var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
  desc1087.putBoolean( idstylisticAlternates, false );
  var idornaments = stringIDToTypeID( "ornaments" );
  desc1087.putBoolean( idornaments, false );
  var idjustificationAlternates = stringIDToTypeID( "justificationAlternates" );
  desc1087.putBoolean( idjustificationAlternates, false );
  var idfigureStyle = stringIDToTypeID( "figureStyle" );
  var idfigureStyle = stringIDToTypeID( "figureStyle" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc1087.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
  var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
  desc1087.putBoolean( idproportionalMetrics, false );
  var idkana = stringIDToTypeID( "kana" );
  desc1087.putBoolean( idkana, false );
  var iditalics = stringIDToTypeID( "italics" );
  desc1087.putBoolean( iditalics, false );
  var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
  var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
  var idwithStream = stringIDToTypeID( "withStream" );
  desc1087.putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
  var idtextLanguage = stringIDToTypeID( "textLanguage" );
  var idtextLanguage = stringIDToTypeID( "textLanguage" );
  var idukenglishLanguage = stringIDToTypeID( "ukenglishLanguage" );
  desc1087.putEnumerated( idtextLanguage, idtextLanguage, idukenglishLanguage );
  var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
  var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
  var iddefaultForm = stringIDToTypeID( "defaultForm" );
  desc1087.putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
  var idmojiZume = stringIDToTypeID( "mojiZume" );
  desc1087.putDouble( idmojiZume, 0.000000 );
  var idgridAlignment = stringIDToTypeID( "gridAlignment" );
  var idgridAlignment = stringIDToTypeID( "gridAlignment" );
  var idroman = stringIDToTypeID( "roman" );
  desc1087.putEnumerated( idgridAlignment, idgridAlignment, idroman );
  var idnoBreak = stringIDToTypeID( "noBreak" );
  desc1087.putBoolean( idnoBreak, false );
  var idClr = charIDToTypeID( "Clr " );
  var desc1088 = new ActionDescriptor();
  var idRd = charIDToTypeID( "Rd  " );
  desc1088.putDouble( idRd, 50 );
  var idGrn = charIDToTypeID( "Grn " );
  desc1088.putDouble( idGrn, 50 );
  var idBl = charIDToTypeID( "Bl  " );
  desc1088.putDouble( idBl, 50 );
  var idRGBC = charIDToTypeID( "RGBC" );
  desc1087.putObject( idClr, idRGBC, desc1088 );
  var idstrokeColor = stringIDToTypeID( "strokeColor" );
  var desc1089 = new ActionDescriptor();
  var idRd = charIDToTypeID( "Rd  " );
  desc1089.putDouble( idRd, 0.000000 );
  var idGrn = charIDToTypeID( "Grn " );
  desc1089.putDouble( idGrn, 0.000000 );
  var idBl = charIDToTypeID( "Bl  " );
  desc1089.putDouble( idBl, 0.000000 );
  var idRGBC = charIDToTypeID( "RGBC" );
  desc1087.putObject( idstrokeColor, idRGBC, desc1089 );
  var idbaseParentStyle = stringIDToTypeID( "baseParentStyle" );
  var desc1090 = new ActionDescriptor();
  var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
  desc1090.putString( idfontPostScriptName, """Consolas""" );
  var idFntN = charIDToTypeID( "FntN" );
  desc1090.putString( idFntN, """Consolas""" );
  var idFntS = charIDToTypeID( "FntS" );
  desc1090.putString( idFntS, """R""" );
  var idScrp = charIDToTypeID( "Scrp" );
  desc1090.putInteger( idScrp, 1 );
  var idFntT = charIDToTypeID( "FntT" );
  desc1090.putInteger( idFntT, 2 );
  var idfontAvailable = stringIDToTypeID( "fontAvailable" );
  desc1090.putBoolean( idfontAvailable, true );
  var idSz = charIDToTypeID( "Sz  " );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idSz, idPnt, 8.000000 );
  var idimpliedFontSize = stringIDToTypeID( "impliedFontSize" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idimpliedFontSize, idPnt, 8.000000 );
  var idHrzS = charIDToTypeID( "HrzS" );
  desc1090.putDouble( idHrzS, 100.000000 );
  var idVrtS = charIDToTypeID( "VrtS" );
  desc1090.putDouble( idVrtS, 100.000000 );
  var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
  desc1090.putBoolean( idsyntheticBold, false );
  var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
  desc1090.putBoolean( idsyntheticItalic, false );
  var idautoLeading = stringIDToTypeID( "autoLeading" );
  desc1090.putBoolean( idautoLeading, true );
  var idTrck = charIDToTypeID( "Trck" );
  desc1090.putInteger( idTrck, 0 );
  var idBsln = charIDToTypeID( "Bsln" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idBsln, idPnt, 0.000000 );
  var idimpliedBaselineShift = stringIDToTypeID( "impliedBaselineShift" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idimpliedBaselineShift, idPnt, 0.000000 );
  var idcharacterRotation = stringIDToTypeID( "characterRotation" );
  desc1090.putDouble( idcharacterRotation, 0.000000 );
  var idAtKr = charIDToTypeID( "AtKr" );
  var idAtKr = charIDToTypeID( "AtKr" );
  var idmetricsKern = stringIDToTypeID( "metricsKern" );
  desc1090.putEnumerated( idAtKr, idAtKr, idmetricsKern );
  var idfontCaps = stringIDToTypeID( "fontCaps" );
  var idfontCaps = stringIDToTypeID( "fontCaps" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc1090.putEnumerated( idfontCaps, idfontCaps, idNrml );
  var iddigitSet = stringIDToTypeID( "digitSet" );
  var iddigitSet = stringIDToTypeID( "digitSet" );
  var iddefaultDigits = stringIDToTypeID( "defaultDigits" );
  desc1090.putEnumerated( iddigitSet, iddigitSet, iddefaultDigits );
  var iddirOverride = stringIDToTypeID( "dirOverride" );
  var iddirOverride = stringIDToTypeID( "dirOverride" );
  var iddirOverrideDefault = stringIDToTypeID( "dirOverrideDefault" );
  desc1090.putEnumerated( iddirOverride, iddirOverride, iddirOverrideDefault );
  var idkashidas = stringIDToTypeID( "kashidas" );
  var idkashidas = stringIDToTypeID( "kashidas" );
  var idkashidaDefault = stringIDToTypeID( "kashidaDefault" );
  desc1090.putEnumerated( idkashidas, idkashidas, idkashidaDefault );
  var iddiacVPos = stringIDToTypeID( "diacVPos" );
  var iddiacVPos = stringIDToTypeID( "diacVPos" );
  var iddiacVPosOpenType = stringIDToTypeID( "diacVPosOpenType" );
  desc1090.putEnumerated( iddiacVPos, iddiacVPos, iddiacVPosOpenType );
  var iddiacXOffset = stringIDToTypeID( "diacXOffset" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( iddiacXOffset, idPnt, 0.000000 );
  var iddiacYOffset = stringIDToTypeID( "diacYOffset" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( iddiacYOffset, idPnt, 0.000000 );
  var idmarkYDistFromBaseline = stringIDToTypeID( "markYDistFromBaseline" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idmarkYDistFromBaseline, idPnt, 100.000000 );
  var idbaseline = stringIDToTypeID( "baseline" );
  var idbaseline = stringIDToTypeID( "baseline" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc1090.putEnumerated( idbaseline, idbaseline, idNrml );
  var idotbaseline = stringIDToTypeID( "otbaseline" );
  var idotbaseline = stringIDToTypeID( "otbaseline" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc1090.putEnumerated( idotbaseline, idotbaseline, idNrml );
  var idstrikethrough = stringIDToTypeID( "strikethrough" );
  var idstrikethrough = stringIDToTypeID( "strikethrough" );
  var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
  desc1090.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
  var idUndl = charIDToTypeID( "Undl" );
  var idUndl = charIDToTypeID( "Undl" );
  var idunderlineOff = stringIDToTypeID( "underlineOff" );
  desc1090.putEnumerated( idUndl, idUndl, idunderlineOff );
  var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
  var idligature = stringIDToTypeID( "ligature" );
  desc1090.putBoolean( idligature, true );
  var idaltligature = stringIDToTypeID( "altligature" );
  desc1090.putBoolean( idaltligature, false );
  var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
  desc1090.putBoolean( idcontextualLigatures, false );
  var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
  desc1090.putBoolean( idalternateLigatures, false );
  var idoldStyle = stringIDToTypeID( "oldStyle" );
  desc1090.putBoolean( idoldStyle, false );
  var idfractions = stringIDToTypeID( "fractions" );
  desc1090.putBoolean( idfractions, false );
  var idordinals = stringIDToTypeID( "ordinals" );
  desc1090.putBoolean( idordinals, false );
  var idswash = stringIDToTypeID( "swash" );
  desc1090.putBoolean( idswash, false );
  var idtitling = stringIDToTypeID( "titling" );
  desc1090.putBoolean( idtitling, false );
  var idconnectionForms = stringIDToTypeID( "connectionForms" );
  desc1090.putBoolean( idconnectionForms, false );
  var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
  desc1090.putBoolean( idstylisticAlternates, false );
  var idornaments = stringIDToTypeID( "ornaments" );
  desc1090.putBoolean( idornaments, false );
  var idjustificationAlternates = stringIDToTypeID( "justificationAlternates" );
  desc1090.putBoolean( idjustificationAlternates, false );
  var idfigureStyle = stringIDToTypeID( "figureStyle" );
  var idfigureStyle = stringIDToTypeID( "figureStyle" );
  var idNrml = charIDToTypeID( "Nrml" );
  desc1090.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
  var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
  desc1090.putBoolean( idproportionalMetrics, false );
  var idkana = stringIDToTypeID( "kana" );
  desc1090.putBoolean( idkana, false );
  var iditalics = stringIDToTypeID( "italics" );
  desc1090.putBoolean( iditalics, false );
  var idruby = stringIDToTypeID( "ruby" );
  desc1090.putBoolean( idruby, false );
  var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
  var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
  var idrotated = stringIDToTypeID( "rotated" );
  desc1090.putEnumerated( idbaselineDirection, idbaselineDirection, idrotated );
  var idtextLanguage = stringIDToTypeID( "textLanguage" );
  var idtextLanguage = stringIDToTypeID( "textLanguage" );
  var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
  desc1090.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
  var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
  var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
  var iddefaultForm = stringIDToTypeID( "defaultForm" );
  desc1090.putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
  var idmojiZume = stringIDToTypeID( "mojiZume" );
  desc1090.putDouble( idmojiZume, 0.000000 );
  var idgridAlignment = stringIDToTypeID( "gridAlignment" );
  var idgridAlignment = stringIDToTypeID( "gridAlignment" );
  var idroman = stringIDToTypeID( "roman" );
  desc1090.putEnumerated( idgridAlignment, idgridAlignment, idroman );
  var idenableWariChu = stringIDToTypeID( "enableWariChu" );
  desc1090.putBoolean( idenableWariChu, false );
  var idwariChuCount = stringIDToTypeID( "wariChuCount" );
  desc1090.putInteger( idwariChuCount, 2 );
  var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
  desc1090.putInteger( idwariChuLineGap, 0 );
  var idwariChuScale = stringIDToTypeID( "wariChuScale" );
  desc1090.putDouble( idwariChuScale, 0.500000 );
  var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
  desc1090.putInteger( idwariChuWidow, 2 );
  var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
  desc1090.putInteger( idwariChuOrphan, 2 );
  var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
  var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
  var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
  desc1090.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
  var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
  desc1090.putInteger( idtcyUpDown, 0 );
  var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
  desc1090.putInteger( idtcyLeftRight, 0 );
  var idleftAki = stringIDToTypeID( "leftAki" );
  desc1090.putDouble( idleftAki, -1.000000 );
  var idrightAki = stringIDToTypeID( "rightAki" );
  desc1090.putDouble( idrightAki, -1.000000 );
  var idjiDori = stringIDToTypeID( "jiDori" );
  desc1090.putInteger( idjiDori, 0 );
  var idnoBreak = stringIDToTypeID( "noBreak" );
  desc1090.putBoolean( idnoBreak, false );
  var idClr = charIDToTypeID( "Clr " );
  var desc1091 = new ActionDescriptor();
  var idRd = charIDToTypeID( "Rd  " );
  desc1091.putDouble( idRd, 0.000000 );
  var idGrn = charIDToTypeID( "Grn " );
  desc1091.putDouble( idGrn, 0.000000 );
  var idBl = charIDToTypeID( "Bl  " );
  desc1091.putDouble( idBl, 0.000000 );
  var idRGBC = charIDToTypeID( "RGBC" );
  desc1090.putObject( idClr, idRGBC, desc1091 );
  var idstrokeColor = stringIDToTypeID( "strokeColor" );
  var desc1092 = new ActionDescriptor();
  var idRd = charIDToTypeID( "Rd  " );
  desc1092.putDouble( idRd, 0.000000 );
  var idGrn = charIDToTypeID( "Grn " );
  desc1092.putDouble( idGrn, 0.000000 );
  var idBl = charIDToTypeID( "Bl  " );
  desc1092.putDouble( idBl, 0.000000 );
  var idRGBC = charIDToTypeID( "RGBC" );
  desc1090.putObject( idstrokeColor, idRGBC, desc1092 );
  var idFl = charIDToTypeID( "Fl  " );
  desc1090.putBoolean( idFl, true );
  var idStrk = charIDToTypeID( "Strk" );
  desc1090.putBoolean( idStrk, false );
  var idfillFirst = stringIDToTypeID( "fillFirst" );
  desc1090.putBoolean( idfillFirst, true );
  var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
  desc1090.putBoolean( idfillOverPrint, false );
  var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
  desc1090.putBoolean( idstrokeOverPrint, false );
  var idlineCap = stringIDToTypeID( "lineCap" );
  var idlineCap = stringIDToTypeID( "lineCap" );
  var idbuttCap = stringIDToTypeID( "buttCap" );
  desc1090.putEnumerated( idlineCap, idlineCap, idbuttCap );
  var idlineJoin = stringIDToTypeID( "lineJoin" );
  var idlineJoin = stringIDToTypeID( "lineJoin" );
  var idmiterJoin = stringIDToTypeID( "miterJoin" );
  desc1090.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
  var idlineWidth = stringIDToTypeID( "lineWidth" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idlineWidth, idPnt, 1.000000 );
  var idmiterLimit = stringIDToTypeID( "miterLimit" );
  var idPnt = charIDToTypeID( "#Pnt" );
  desc1090.putUnitDouble( idmiterLimit, idPnt, 4.000000 );
  var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
  desc1090.putDouble( idlineDashoffset, 0.000000 );
  var idTxtS = charIDToTypeID( "TxtS" );
  desc1087.putObject( idbaseParentStyle, idTxtS, desc1090 );
  var idTxtS = charIDToTypeID( "TxtS" );
  desc1086.putObject( idTxtS, idTxtS, desc1087 );
  var idTxtt = charIDToTypeID( "Txtt" );
  list97.putObject( idTxtt, desc1086 );
  desc1078.putList( idTxtt, list97 );
  var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
  var list98 = new ActionList();
  var desc1093 = new ActionDescriptor();
  var idFrom = charIDToTypeID( "From" );
  desc1093.putInteger( idFrom, 0 );
  var idT = charIDToTypeID( "T   " );
  desc1093.putInteger( idT, 6 );
  var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
  var desc1094 = new ActionDescriptor();
  var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
  desc1094.putBoolean( idstyleSheetHasParent, true );
  var idAlgn = charIDToTypeID( "Algn" );
  var idAlg = charIDToTypeID( "Alg " );
  var idCntr = charIDToTypeID( "Cntr" );
  desc1094.putEnumerated( idAlgn, idAlg, idCntr );
  var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
  desc1093.putObject( idparagraphStyle, idparagraphStyle, desc1094 );
  var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
  list98.putObject( idparagraphStyleRange, desc1093 );
  desc1078.putList( idparagraphStyleRange, list98 );
  var idkerningRange = stringIDToTypeID( "kerningRange" );
  var list99 = new ActionList();
  desc1078.putList( idkerningRange, list99 );
  var idTxLr = charIDToTypeID( "TxLr" );
  desc1077.putObject( idUsng, idTxLr, desc1078 );
  var idLyrI = charIDToTypeID( "LyrI" );
  desc1077.putInteger( idLyrI, 75 );
  executeAction( idMk, desc1077, DialogModes.NO );
}
function bootstrap() {
  qid = queryFillID(al);
  if (!qid) qid = defaultColorName;
  var pls = findPaletteLayerSet(al);
  if (!pls) {
    pls = doc.layerSets.add();
    pls.name = '# palette';
  }
  nls = findNearestLayerSet(pls, qid);
  doc.suspendHistory('New Palette (' + qid + ')', 'exec()');
}
function exec() {
  var pal = findPalette(nls, qid);
  if (pal) {
    doc.activeLayer = pal;
    pal.pixelsLocked = false;
    pal.positionLocked = false;
    pal.transparentPixelsLocked = false;
    doc.selection.deselect();
    doc.selection.fill(app.foregroundColor, ColorBlendMode.NORMAL, 100, true);
    doc.activeLayer = al;
    // TODO: execute mirror.jsx ?
    return;
  }
  var l = makePolygonInNLS(nls);
  if (qid == defaultColorName)
    qid = suggestFillID(nls);
  l.name = qid + ' #fill(' + qid + ')';
  doc.activeLayer = al;
}
